
#pragma once

#include <list>

#include <mutex>
#include <thread>

namespace std {

template <typename _Ty, class _Alloc = allocator<_Ty>>
class thread_list : public list<_Ty, _Alloc> {
  typedef thread_list<_Ty, _Alloc> _Myt;
  typedef list<_Ty, _Alloc> _Mybase;

public:
  typedef typename _Mybase::value_type value_type;
  typedef typename _Mybase::allocator_type allocator_type;

  typedef typename _Mybase::size_type size_type;
  typedef typename _Mybase::difference_type difference_type;

  typedef typename _Mybase::reference reference;
  typedef typename _Mybase::const_reference const_reference;
  typedef typename _Mybase::iterator iterator;
  typedef typename _Mybase::const_iterator const_iterator;
  typedef typename _Mybase::pointer pointer;
  typedef typename _Mybase::const_pointer const_pointer;

  typedef std::reverse_iterator<iterator> reverse_iterator;
  typedef std::reverse_iterator<const_iterator> const_reverse_iterator;

  thread_list() : _Mybase(), _mutex(), _closed(false) {}
  thread_list(_Myt const & _Right) = delete;
  thread_list(_Mybase const & _Right) = delete;
  _Myt & operator=(_Mybase const & _Right) = delete;

  void push_back(_Ty && _Val) {
    _mutex.lock();
    _Mybase::push_back(forward<_Ty>(_Val));
    _mutex.unlock();
  }
  void push_back(_Ty const & _Val) {
    _mutex.lock();
    _Mybase::push_back(_Val);
    _mutex.unlock();
  }

  void pop_front() {
    _mutex.lock();
    _Mybase::pop_front();
    _mutex.unlock();
  }

  inline void close() { _closed = true; }

  inline bool operator!() const { return this->empty() && _closed; }
  inline operator bool() const { return !!*this; }

  bool pop_front(_Ty & _Val) {
    while (this->empty()) {
      if (!*this) return false;
      _wait();
    }
    _Val = this->front();
    pop_front();
    return true;
  }

private:
  void _wait() {
    // this_thread::sleep_for(chrono::milliseconds(100));
    this_thread::yield();
  }

  mutex _mutex;
  bool _closed;
};

} // namespace std
